Testcase.create(:name => "rangesum.java", :java => "// basic - rangeSum\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n    int ret = 0;\n    int cnt = 0;\n    int i = 0;\n    int N = J_RECOVER_ITER_NUM.get();\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n        if (i > N / 2) {\n            ret += cur;\n            cnt += 1;\n        }\n        i++;\n    }\n\n    if (cnt != 0)\n        output.collect(key, new IntWritable(ret));\n    else \n        output.collect(key, new IntWritable(0));\n            \n}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 2, :result => "Not Commutative.")
Testcase.create(:name => "max.java", :java => "// basic - max\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n    int ret = iter.next().get();\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n        ret = ret < cur ? cur : ret;\n    }\n\n    output.collect(key, new IntWritable(ret));\n}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "range.java", :java => "// Find the range of the values\n\npublic void reduce(Text prefix, Iterator<IntWritable> iter,\n        OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n    int cur = iter.next().get();\n    int max = cur;\n    int min = cur;\n    while(iter.hasNext()) {\n        cur = iter.next().get();\n        max = cur > max ? cur : max;\n        min = cur < min ? cur : min;\n    }\n    output.collect(prefix, new IntWritable(max - min));\n}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "avg.java", :java => "// basic - avg\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n    int ret = 0;\n    int cnt = 0;\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n        ret += cur;\n        cnt += 1;\n    }\n\n    output.collect(key, new DoubleWritable(ret / cnt));\n}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "sum.java", :java => "// basic - sum\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n    int ret = 0;\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n        ret += cur;\n    }\n\n    output.collect(key, new IntWritable(ret));\n}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "sep.java", :java => "// basic - sep\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {\n    int ret = 0;\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n\n        if (cur % 2 == 0) ret += 1;\n        else ret -= 1;\n    }\n\n    output.collect(key, new IntWritable(ret));\n}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "MAD1.java", :java => "// basic - Mean Absolute Deviation part1\n// Calculate the average\n// Cont. in part 2\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n    int cnt = 0;\n    double sum = iter.next().get();\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n        sum += cur;\n        cnt += 1;\n    }\n\n    output.collect(key, new DoubleWritable(sum / cnt));\n}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "MAD2.java", :java => "// basic - Mean Absolute Deviation part2\n// Avarge calculated in part1, use random value here\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n    int cnt = 0;\n    int mad = 0;\n    double avg = 50;\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n\n        if (cur < avg) mad += avg - cur;\n        else mad += cur - avg;\n\tcnt += 1;\n    }\n\n    output.collect(key, new DoubleWritable(mad / cnt));\n}\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "dis.java", :java => "// basic - dis\n\npublic void reduce(Text key, Iterator<IntWritable> iter,\n        OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n    int ret = 0;\n    int cnt = 0;\n\n    while(iter.hasNext()) {\n        int cur = iter.next().get();\n\n        if (cur > 100) {\n            ret += cur;\n            cnt += 1;\n        }\n    }\n\n    if (cnt != 0)\n        output.collect(key, new DoubleWritable(ret / cnt));\n    else\n        output.collect(key, new DoubleWritable(0));\n}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
Testcase.create(:name => "standard_deviation.java", :java => "// basic - Standard Deviation\n\npublic void reduce(Text key, Iterator<DoubleWritable> values, \n        OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n    double stdDev = 0;\n    double sumSqr = 0;\n    double count = 0;\n    double mean = 0;\n    double sum = 0;\n    while(values.hasNext()){\n        double value = values.next().get();\n        sumSqr += value * value;\n        sum += value;\n        count++;\n    }\n    mean = sum / count;\n    stdDev = Math.sqrt((sumSqr - count * mean * mean) / count);\n    output.collect(key, new DoubleWritable(stdDev));\n}\n", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Literacture", :comment => "", :result_type => 1, :result => "Commutative.")
puts "Literacure benchmarks done"
