Testcase.create(:name => "max_even_odd.java", :java => "// Sum up the odd and even numbers in the list\n// Return the bigger one\n// Not commutable\n\n   public void reduce(Text prefix, Iterator<IntWritable> iter,\n            OutputCollector<Text, IntWritable> output, Reporter reporter)\n            throws IOException\n        {\n            int sumEven = 0;\n            int sumOdd = 0;\n            int index = 0;\n\n            while(iter.hasNext()) {\n                int cur = iter.next().get();\n                if (index % 2 == 0) sumEven += cur;\n                else sumOdd += cur;\n                index += 1;\n            }\n\n            output.collect(prefix, new IntWritable(sumEven > sumOdd ? sumEven : sumOdd));\n        }\n\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "IntWritable", :r_type => "Collector", :source => "Self", :result => "CANNOT prove to be commutable. Found counter examples")

Testcase.create(:name => "tricky_avg.java", :java => "// \n\n\tpublic void reduce(Text key, Iterator<IntWritable> values, \n            OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n        double avg = 0;\n        int sum1 = 0;\n        int count1 = 0;\n        int sum2 = 0;\n        int count2 = 0;\n        int sum3 = 0;\n        int count3 = 0;\n\n\t\twhile(values.hasNext()){\n            int cur = values.next().get();\n            if (cur < 10) {\n                sum1 += cur;\n                count1 += 1;\n            } else if (cur >= 20) {\n                sum3 += cur;\n                count3 += 1;\n            } else {\n                sum2 += cur;\n                count2 += 1;\n            }\n\t\t}\n        avg = (sum1 + sum2 + sum3) / (count1 + count2 + count3);\n\n\t\toutput.collect(key, new DoubleWritable(avg));\n\t}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Self", :result => "Proved to be commutable")

Testcase.create(:name => "standard_deviation.java", :java => "// Standard Deviation\n\n\tpublic void reduce(Text key, Iterator<DoubleWritable> values, \n            OutputCollector<Text, DoubleWritable> output, Reporter reporter) throws IOException {\n\t\tdouble stdDev = 0;\n\t\tdouble sumSqr = 0;\n\t\tdouble count = 0;\n\t\tdouble mean = 0;\n\t\tdouble sum = 0;\n\t\twhile(values.hasNext()){\n\t\t\tdouble value = values.next().get();\n\t\t\tsumSqr += value * value;\n\t\t\tsum += value;\n\t\t\tcount++;\n\t\t}\n\t\tmean = sum / count;\n\t\tstdDev = Math.sqrt((sumSqr - count * mean * mean) / count);\n\t\toutput.collect(key, new DoubleWritable(stdDev));\n\t}\n
", :t1 => "Text", :t2 => "DoubleWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :source => "Self", :result => "Proved to be commutable")

Testcase.create(:name => "tcp_waittime.java", :java => "// Idea comes from the TCP back up inverval\n\npublic void reduce(Text key, Iterator<IntWritable> values, \n        OutputCollector<Text, Integer> output, Reporter reporter) throws IOException {\n\n    int cur = values.next().get();\n    int maxEdge = cur * 2;\n\n    while(values.hasNext()){\n        int in = values.next().get();\n        if (cur + in > maxEdge) {\n            maxEdge = maxEdge * 2;\n            cur = 0;\n        } else {\n            cur += in;\n        }\n    }\n\n    output.collect(key, cur);\n}\n", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "Integer", :r_type => "Collector", :source => "Self", :result => "CANNOT prove to be commutable. Found counter examples")

#Testcase.create(:name => "tricky_avg.java", :java => "", :t1 => "Text", :t2 => "IntWritable", :t3 => "Text", :t4 => "DoubleWritable", :r_type => "Collector", :result => "Proved to be commutable")

puts "Self-written benchmakrs done"
